# Francesco Maresca, March 2017
# f.maresca@rug.nl

#---- Initialize simulation ------------------
clear
units metal
dimension 3
boundary p p s
atom_style atomic

#---- Create Alloy Atoms ----------------------
variable a equal 2.828042

#---- periodic spacings of bcc lattice
variable Nax equal 30
variable Nay equal 1
variable Naz equal 19

#---- bcc lattice dimensions in periodic box

variable xadim equal sqrt(6)/2*${Nax}*$a
variable yadim equal sqrt(3)/2*${Nay}*$a
variable zadim equal sqrt(2)/2*${Naz}*$a

#---- bcc region accounting for round-off

variable eps equal 0.1
variable eps_bc equal 5
variable eps_bct equal 13
variable eps_bcb equal 11

variable xadim_min equal -${xadim}-${eps}
variable xadim_max equal ${xadim}-2*${eps}

variable yadim_min equal -${yadim}-${eps}
variable yadim_max equal ${yadim}-${eps}

variable zadim_min equal -${zadim}-${eps}
variable zadim_max equal ${zadim}-${eps}

variable zadim_inf equal -${zadim}-3
variable yadim_inf equal -${yadim}-3
variable xadim_inf equal -${xadim}-3
variable zadim_sup equal ${zadim}+3
variable xadim_sup equal ${xadim}+3
variable yadim_sup equal ${yadim}+3

#---- dimensions for subregions

variable zadim_mid equal -${eps}
variable zadim_top equal ${zadim}-${eps_bct}
variable zadim_bot equal -${zadim}+${eps_bcb}

variable zadim_cent_bot equal -1.5${eps_bc}
variable zadim_cent_top equal 1.5*${eps_bc}

variable msft_disp equal sqrt(3)/2*$a

#---- create bcc lattice
region whole prism ${xadim_min} ${xadim} ${yadim_min} ${yadim} ${zadim_min} ${zadim} 0.0 0.0 0.0 units box
create_box      1 whole

lattice         bcc $a
region  1 prism ${xadim_min} ${xadim_max} ${yadim_min} ${yadim_max} ${zadim_min} ${zadim_max} 0.0 0.0 0.0 units box
lattice bcc $a orient x 1 2 -1 orient y -1 1 1 orient z 1 0 1
create_atoms 1 region 1

region  2 prism ${xadim_inf} ${xadim_sup} ${yadim_inf} ${yadim_sup} ${zadim_inf} ${zadim_mid} 0.0 0.0 0.0 units box
region  3 prism ${xadim_inf} ${xadim_sup} ${yadim_inf} ${yadim_sup} ${zadim_inf} ${zadim_bot} 0.0 0.0 0.0 units box
region  4 prism ${xadim_inf} ${xadim_sup} ${yadim_inf} ${yadim_sup} ${zadim_top} ${zadim_sup} 0.0 0.0 0.0 units box
region  5 prism ${xadim_inf} ${xadim_sup} ${yadim_inf} ${yadim_sup} ${zadim_cent_bot} ${zadim_cent_top} 0.0 0.0 0.0 units box
region  7 prism ${xadim_min} ${xadim_max} ${yadim_min} ${yadim_max} ${zadim_mid} ${zadim_max} 0.0 0.0 0.0 units box

group alloy type 1

group bottom region 2
group botg region 3
group topg region 4
group center region 5
group upper_half region 7

#---- Define variables

variable zmax equal bound(topg,zmin)
variable zmin equal bound(botg,zmax)

variable dz equal v_zmax-v_zmin

variable ntop equal count(topg)
variable nbot equal count(botg)

variable rtop_0 equal -50*lx*ly/(v_ntop*160218)
variable rbot_0 equal 50*lx*ly/(v_nbot*160218)

variable rtop equal  0
variable rbot equal  0

#---- Define Interatomic Potential -----------
include ../../potential.in
mass * 55

#---- Run Minimization -----------------------
#reset_timestep 0
fix 1 all box/relax x 0.0 y 0.0 xy 0.0 vmax 0.01
thermo 10

compute eng all pe/atom
compute eatoms all reduce sum c_eng
compute stress all stress/atom NULL virial

compute eng_core center pe/atom
compute eatoms_core center reduce sum c_eng
variable ncenter equal count(center)

variable press_x equal abs(pxx)
variable press_y equal abs(pyy)
variable press_xy equal abs(pxy)

#---- Run Minimization -----------------------
#reset_timestep 0
fix 1 all box/relax x 0.0 y 0.0 xy 0.0 vmax 0.01
thermo 10

variable j loop 10
label loop_bcc

#---- dump for post processing ---------------
dump 1 all custom 10000 dump.bcc.* id type x y z c_eng fx fy fz

variable tol equal 100
variable i loop 10

label loop_head

fix 1 all box/relax x 0.0 y 0.0 xy 0.0 vmax 0.01
thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz pxy pxz pyz c_eatoms fnorm
min_style cg
minimize 1e-15 1e-15 100 20000

if "${press_x} < ${tol} && ${press_y} < ${tol} && ${press_xy} < ${tol}" then "jump input_BCC exit_label"

next i
jump input_BCC loop_head

label exit_label

unfix 1

thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz c_eatoms c_eatoms_core fnorm
min_style fire
minimize 0 1e-4 50000 200000

undump 1

next j
jump input_BCC loop_bcc

write_restart restart.bcc

#---- Displacement ---------------------------
displace_atoms upper_half ramp y -${msft_disp} 0.0 x ${xadim_min} ${xadim_max} units box

#---- Run Minimization - First normal stresses

reset_timestep 0
fix 1 all box/relax x 0.0 y 0.0 vmax 0.01
thermo 10

include SF_detection

variable p loop 10
label loop_screw2

#---- dump for post processing ---------------
dump 1 all custom 10000 dump.screw.norm.* id type x y z c_eng c_eng_core c_cna_at fx fy fz

variable tol equal 100
variable l loop 10

label loop_head3

fix 1 all box/relax x 0.0 y 0.0 vmax 0.01
thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz v_ncenter c_eatoms c_eatoms_core c_Y_sf[2] fnorm
min_style cg
minimize 1e-15 1e-15 100 20000

#variable press_x equal abs(pxx)
#variable press_y equal abs(pyy)

if "${press_x} < ${tol} && ${press_y} < ${tol}" then "jump input_BCC exit_label2"

next l
jump input_BCC loop_head3

label exit_label2

unfix 1

thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz c_eatoms c_eatoms_core fnorm
min_style fire
minimize 0 1e-4 50000 200000

undump 1

next p
jump input_BCC loop_screw2

uncompute cna_at
uncompute cna_tot
variable cna_value delete
uncompute Y_sf
group sf_atoms delete

write_restart restart.screw.norm

#---- Run Minimization -----------------------
#reset_timestep 0
fix 1 all box/relax x 0.0 y 0.0 xy 0.0 vmax 0.01
thermo 10

include SF_detection

variable k loop 10
label loop_screw

#---- dump for post processing ---------------
dump 1 all custom 10000 dump.screw.* id type x y z c_eng c_eng_core c_cna_at fx fy fz

variable tol equal 100
variable q loop 10

label loop_head2

fix 1 all box/relax x 0.0 y 0.0 xy 0.0 vmax 0.01
thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz pxy pxz pyz v_ncenter c_eatoms c_eatoms_core c_Y_sf[2] fnorm
min_style cg
minimize 1e-15 1e-15 100 20000

#variable press_xy equal abs(pxy)

if "${press_x} < ${tol} && ${press_y} < ${tol} && ${press_xy} < ${tol}" then "jump input_BCC exit_label3"

next q
jump input_BCC loop_head2

label exit_label3

unfix 1

thermo 10
thermo_style custom step pe lx ly lz press pxx pyy pzz pxy pxz pyz v_ncenter c_eatoms c_eatoms_core fnorm
min_style fire
minimize 0 1e-4 50000 200000

undump 1

next k
jump input_BCC loop_screw

uncompute cna_at
uncompute cna_tot
variable cna_value delete
uncompute Y_sf
group sf_atoms delete

write_restart restart.screw

#---- Apply shear force ----------------------

print "applied force" file data.force
print "position" file data.pos

compute disp all displace/atom

variable n loop 80
label loop1

include SF_detection

uncompute cna_at
uncompute cna_tot
variable cna_value delete

variable rtop equal $n*${rtop_0}
variable rbot equal $n*${rbot_0}

fix 2 topg addforce 0 ${rtop} 0 
fix 3 botg addforce 0 ${rbot} 0 

#---- dump for post processing ---------------
dump 1 all custom 100 dump.shear.* id type x y z c_eng c_eng_core c_disp[1] c_disp[2] c_disp[3] c_disp[4] c_stress[1] c_stress[2] c_stress[3] c_stress[4] c_stress[5] c_stress[6] fx fy fz

thermo_style custom step lx ly pxx pyy pzz pxy pxz pyz lz fnorm

print ${rtop} append data.force
print ${Ysf} append data.pos

# --- minimization
min_style fire
minimize 0 1e-4 50000 200000

variable m equal $n+1

dump $m all custom 2500 dump.shear.final.$n id type x y z c_eng c_eng_core c_disp[1] c_disp[2] c_disp[3] c_disp[4] c_stress[1] c_stress[2] c_stress[3] c_stress[4] c_stress[5] c_stress[6] fx fy fz
min_style fire
minimize 0 1e-3 1 1

uncompute Y_sf
group sf_atoms delete

unfix 2 
unfix 3

undump $n

if "${n}>1" then "undump 1"

write_restart restart.shear.$n

next n

jump input_BCC loop1

#---- End of simulation

variable natoms equal "count(all)"
variable teng equal "c_eatoms"
variable ecoh equal "v_teng/v_natoms"

# SIMULATION DONE
#print "%% ecoh = ${ecoh};"
#print "## center dislocation = ${Ysf};"
print "All done!"